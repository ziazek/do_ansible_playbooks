##################################################
# Zek Chak: LEMP on Ubuntu 20.04
##################################################
---
- hosts: all
  become: true
  vars_files:
    - vars/default.yml

  tasks:
    - name: Upgrade system
      apt: upgrade=dist update_cache=yes

    - name: Install Prerequisites
      apt: name={{ item }} update_cache=yes state=latest force_apt_get=yes
      loop: [ 'aptitude' ]

    - name: Install LEMP Packages & Let's Encrypt certbot
      apt: name={{ item }} update_cache=yes state=latest
      loop: [ 'nginx', 'mysql-server', 'python3-pymysql', 'php-fpm', 'php-mysql', 'php-simplexml', 'php-curl', 'build-essential', 'php-pear', 'php-dev', 'libmcrypt-dev', 'certbot', 'python3-certbot-nginx' ]
    
    - name: Update PECL channels for php-mcrypt
      shell: "pecl channel-update pecl.php.net"

    - name: Update PECL channels for php-mcrypt 2
      shell: "pecl update-channels"

    - name: Check if mcrypt is installed
      shell: "pecl list | grep mcrypt"
      register: mcrypt_installed
      ignore_errors: true
    
    # - debug:
    #     var: mcrypt_installed.stdout

    - name: Install mcrypt extension
      shell: 'printf "\n" | pecl install mcrypt'
      when: mcrypt_installed.stdout == ""

    - name: Add extension to php.ini
      lineinfile:
        path: /etc/php/7.4/cli/php.ini
        regexp: '^extension=mycrypt\.so'
        insertafter: "^;extension=xsl"
        line: "extension=mycrypt.so"



    # MySQL Configuration
    - name: Sets the root password 
      mysql_user: 
        name: root 
        password: "{{ mysql_root_password }}"
        login_unix_socket: /var/run/mysqld/mysqld.sock

    - name: Create .my.cnf
      template:
        src: "files/client.my.cnf.j2"
        dest: "/root/.my.cnf"
        owner: root
        group: root
        mode: 0600 

    - name: Removes all anonymous user accounts
      mysql_user:
        name: ''
        host_all: yes
        state: absent
        login_user: root
        login_password: "{{ mysql_root_password }}"

    - name: Removes the MySQL test database
      mysql_db: 
        name: test 
        state: absent
        login_user: root
        login_password: "{{ mysql_root_password }}"

    - name: Creates database for WordPress
      mysql_db:
        name: "{{ mysql_db }}"
        state: present
        login_user: root
        login_password: "{{ mysql_root_password }}"
      tags: [ mysql ]

    - name: Create MySQL user for WordPress
      mysql_user:
        name: "{{ mysql_user }}"
        password: "{{ mysql_password }}"
        priv: "{{ mysql_db }}.*:ALL"
        state: present
        login_user: root
        login_password: "{{ mysql_root_password }}"
      tags: [ mysql ]

# UFW Configuration
    - name: "UFW - Allow HTTP on port {{ http_port }}"
      ufw:
        rule: allow
        port: "{{ http_port }}"
        proto: tcp

# UFW Configuration HTTPS
    - name: "UFW - Allow HTTPS on port {{ https_port }}"
      ufw:
        rule: allow
        port: "{{ https_port }}"
        proto: tcp

# UFW Allow SSH
    - name: UFW - OpenSSH
      ufw:
        rule: allow
        name: OpenSSH

# Enable UFW
    - name: Enable UFW
      ufw:
        state: enabled

# WordPress Configuration
    - name: Create document root
      file:
        path: "/var/www/{{ http_host }}"
        state: directory
        owner: "www-data"
        group: "www-data"
        mode: '0755'
      tags: [ wordpress ]

    - name: Download and unpack latest WordPress
      unarchive:
        src: https://wordpress.org/latest.tar.gz
        dest: "/var/www/{{ http_host }}"
        remote_src: yes
        creates: "/var/www/{{ http_host }}/wordpress"
      tags: [ wordpress ]

    - name: add ubuntu to www-data group
      user:
        name: ubuntu
        groups: www-data
        append: yes

    - name: Set ownership
      file:
        path: "/var/www/{{ http_host }}"
        state: directory
        recurse: yes
        owner: ubuntu
        group: www-data
      tags: [ wordpress ]

    - name: Set ownership for wp-content
      file:
        path: "/var/www/{{ http_host }}/wordpress/wp-content"
        state: directory
        recurse: yes
        owner: www-data
        group: www-data
      tags: [ wordpress ]


    - name: Set permissions for directories
      shell: "/usr/bin/find /var/www/{{ http_host }}/wordpress/ -type d -exec chmod 750 {} \\;"
      tags: [ wordpress ]

    - name: Set permissions for files
      shell: "/usr/bin/find /var/www/{{ http_host }}/wordpress/ -type f -exec chmod 640 {} \\;"
      tags: [ wordpress ]

    - name: Set up wp-config
      template:
        src: "files/wp-config.php.j2"
        dest: "/var/www/{{ http_host }}/wordpress/wp-config.php"
      tags: [ wordpress ]

    # Let's Encrypt Configuration
    # Comment this out first until DNS has changed
    - name: Generate new certificate.
      shell: "certbot certonly --nginx --noninteractive --agree-tos --email {{ certbot_admin_email }} -d {{ http_host }}"
      when: not http_host_is_root

    - name: Generate new certificate.
      shell: "certbot certonly --nginx --noninteractive --agree-tos --email {{ certbot_admin_email }} -d {{ http_host }}"
      # shell: "certbot certonly --nginx --noninteractive --agree-tos --email {{ certbot_admin_email }} -d {{ http_host }} -d www.{{ http_host }}"
      when: http_host_is_root
      # with_items: "{{ letsencrypt_cert.results }}"
    
    # Nginx Configuration
    - name: Sets Nginx certbot challenge snippet file
      template:
        src: "files/letsencrypt-acme-challenge.conf.j2"
        dest: "/etc/nginx/snippets/letsencrypt-acme-challenge.conf"

    - name: Sets Nginx conf file
      template:
        src: "files/nginx.conf.j2"
        dest: "/etc/nginx/sites-available/{{ http_conf }}"

    - name: Enables new site
      file:
        src: "/etc/nginx/sites-available/{{ http_conf }}"
        dest: "/etc/nginx/sites-enabled/{{ http_conf }}"
        state: link
      notify: Reload Nginx
    
    - name: Removes "default" site
      file:
        path: "/etc/nginx/sites-enabled/default"
        state: absent
      notify: Reload Nginx

  handlers:
    - name: Reload Nginx
      service:
        name: nginx
        state: reloaded

    - name: Restart Nginx
      service:
        name: nginx
        state: restarted

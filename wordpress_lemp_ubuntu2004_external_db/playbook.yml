##################################################
# Zek Chak: LEMP on Ubuntu 20.04
##################################################
---
- hosts: all
  become: true
  vars_files:
    # - vars/dev.yml
    # - vars/uat.yml

  tasks:
    - name: Upgrade system
      apt: upgrade=dist update_cache=yes

    - name: Install Prerequisites
      apt: name={{ item }} update_cache=yes state=latest force_apt_get=yes
      loop: [ 'aptitude' ]

    - name: Install LEMP Packages & Let's Encrypt certbot
      apt:
        state: latest
        update_cache: yes
        pkg: 
        - nginx
        - python3-pymysql
        - php-fpm
        - php-mysql
        - php-simplexml
        - php-curl
        - build-essential
        - php-pear
        - php-dev
        - php-gd
        - php-mbstring
        - certbot
        - python3-certbot-nginx

    - name: Install mySQL server
      apt: name={{ item }} update_cache=yes state=latest
      loop: [ 'mysql-server']
      when: not external_db

    - name: Install mySQL client
      apt: name={{ item }} update_cache=yes state=latest
      loop: [ 'mysql-client']
      when: external_db

    - name: Set upload_max_filesize in fpm/php.ini
      lineinfile:
        path: /etc/php/7.4/fpm/php.ini
        regexp: '^upload_max_filesize'
        line: "upload_max_filesize = 128M"

    - name: Set post_max_size in fpm/php.ini
      lineinfile:
        path: /etc/php/7.4/fpm/php.ini
        regexp: '^post_max_size'
        line: "post_max_size = 128M"

    - name: Sets the root password 
      mysql_user: 
        name: root 
        password: "{{ mysql_root_password }}"
        login_unix_socket: /var/run/mysqld/mysqld.sock
      when: not external_db

    - name: Create .my.cnf
      template:
        src: "files/client.my.cnf.j2"
        dest: "/root/.my.cnf"
        owner: root
        group: root
        mode: 0600 

    - name: Removes all anonymous user accounts
      community.mysql.mysql_user:
        login_host: "{{ mysql_host }}"
        name: ''
        host_all: yes
        state: absent
        login_user: "{{ mysql_root_user }}"
        login_password: "{{ mysql_root_password }}"

    - name: Removes the MySQL test database
      community.mysql.mysql_db:
        login_host: "{{ mysql_host }}"
        name: test 
        state: absent
        login_user: "{{ mysql_root_user }}"
        login_password: "{{ mysql_root_password }}"

    - name: Creates database for WordPress
      community.mysql.mysql_db:
        login_host: "{{ mysql_host }}"
        name: "{{ mysql_db }}"
        state: present
        login_user: "{{ mysql_root_user }}"
        login_password: "{{ mysql_root_password }}"
      tags: [ mysql ]

    - name: Create database user with password and all database privileges
      community.mysql.mysql_user:
        login_host: "{{ mysql_host }}"
        host: "{{ external_db | ternary('%', 'localhost') }}"
        name: "{{ mysql_user }}"
        password: "{{ mysql_password }}"
        priv: "{{ mysql_db }}.*:ALL"
        state: present
        login_user: "{{ mysql_root_user }}"
        login_password: "{{ mysql_root_password }}"
      tags: [ mysql ]

# UFW Configuration
    - name: "UFW - Allow HTTP on port {{ http_port }}"
      ufw:
        rule: allow
        port: "{{ http_port }}"
        proto: tcp

# UFW Configuration HTTPS
    - name: "UFW - Allow HTTPS on port {{ https_port }}"
      ufw:
        rule: allow
        port: "{{ https_port }}"
        proto: tcp

# UFW Allow SSH
    - name: UFW - OpenSSH
      ufw:
        rule: allow
        name: OpenSSH

# Enable UFW
    - name: Enable UFW
      ufw:
        state: enabled

# WordPress Configuration
    - name: Create document root
      file:
        path: "/var/www/{{ http_host }}"
        state: directory
        owner: "www-data"
        group: "www-data"
        mode: '0755'
      tags: [ wordpress ]

    - name: Download and unpack latest WordPress
      unarchive:
        src: https://wordpress.org/latest.tar.gz
        dest: "/var/www/{{ http_host }}"
        remote_src: yes
        creates: "/var/www/{{ http_host }}/wordpress"
      tags: [ wordpress ]

    - name: add page to do PHP debugging
      template:
        src: "files/phpdebug.php.j2"
        dest: "/var/www/{{ http_host }}/wordpress/jamdebug-BNpvfEt8SX.php"
      when: php_debug_page

    - name: remove page for PHP debugging
      file:
        path: "/var/www/{{ http_host }}/wordpress/jamdebug-BNpvfEt8SX.php"
        state: absent
      when: not php_debug_page

    - name: Set up wp-config
      template:
        src: "files/wp-config.php.j2"
        dest: "/var/www/{{ http_host }}/wordpress/wp-config.php"
      tags: [ wordpress ]

    # Nginx Configuration
    - name: Sets Nginx certbot challenge snippet file
      template:
        src: "files/letsencrypt-acme-challenge.conf.j2"
        dest: "/etc/nginx/snippets/letsencrypt-acme-challenge.conf"

    - name: Sets Nginx conf file
      template:
        src: "files/nginx.conf.j2"
        dest: "/etc/nginx/sites-available/{{ http_conf }}"

    - name: Enables new site
      file:
        src: "/etc/nginx/sites-available/{{ http_conf }}"
        dest: "/etc/nginx/sites-enabled/{{ http_conf }}"
        state: link
      notify: Reload Nginx
    
    - name: Removes "default" site
      file:
        path: "/etc/nginx/sites-enabled/default"
        state: absent
      notify: Reload Nginx

    # Let's Encrypt Configuration
    # Comment this out first until DNS has changed
    - name: Generate new certificate.
      shell: "certbot certonly --nginx --noninteractive --agree-tos --email {{ certbot_admin_email }} -d {{ http_host }}"
      when: (not http_host_is_root) and enable_https

    - name: Generate new certificate.
      shell: "certbot certonly --nginx --noninteractive --agree-tos --email {{ certbot_admin_email }} -d {{ http_host }} -d www.{{ http_host }}"
      when: http_host_is_root and enable_https
      # with_items: "{{ letsencrypt_cert.results }}"

    # Append lines to nginx conf after getting letsencrypt cert
    - name: Add SSL settings
      blockinfile:
        path: "/etc/nginx/sites-available/{{ http_conf }}"
        insertafter: "# SSH settings below here"
        block: |
          listen 443 ssl;
          ssl_certificate /etc/letsencrypt/live/{{ http_host }}/fullchain.pem;
          ssl_certificate_key /etc/letsencrypt/live/{{ http_host }}/privkey.pem;
          include /etc/letsencrypt/options-ssl-nginx.conf;
          ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
      notify: Reload Nginx
      when: enable_https

    # Git
    - name: add id_rsa to ubuntu to do git pull
      template:
        src: "{{ gituser_id_rsa_file }}"
        dest: "/home/ubuntu/.ssh/id_rsa"
        owner: ubuntu
        group: ubuntu
        mode: 0600
      when: enable_git

    - name: add id_rsa to root to do git pull
      template:
        src: "{{ gituser_id_rsa_file }}"
        dest: "/root/.ssh/id_rsa"
        owner: root
        group: root
        mode: 0600
      when: enable_git
    
    - name: add gitconfig for root user
      template:
        src: "files/gitconfig.j2"
        dest: "/root/.gitconfig"
        owner: root
        group: root
      when: enable_git
    
    - name: Git init
      shell: 
        cmd: git init
        chdir: "/var/www/{{ http_host }}/wordpress"
      when: enable_git
    
    - name: Check if git remote exists
      shell:
        cmd: git remote
        chdir: "/var/www/{{ http_host }}/wordpress"
      register: git_remotes
      when: enable_git

    - name: Git remote add
      shell: 
        cmd: git remote add origin {{ git_origin }}
        chdir: "/var/www/{{ http_host }}/wordpress"
      when: enable_git and git_remotes.stdout == ""
    
    - name: add ubuntu to www-data group
      user:
        name: ubuntu
        groups: www-data
        append: yes

    - name: Set ownership
      file:
        path: "/var/www/{{ http_host }}"
        state: directory
        recurse: yes
        owner: www-data
        group: www-data
      tags: [ wordpress ]

    # - name: Set ownership for plugins
    #   file:
    #     path: "/var/www/{{ http_host }}/wordpress/wp-content"
    #     state: directory
    #     recurse: yes
    #     owner: www-data
    #     group: www-data
    #   tags: [ wordpress ]

    - name: Set permissions for directories
      shell: "/usr/bin/find /var/www/{{ http_host }}/wordpress/ -type d -exec chmod 770 {} \\;"
      tags: [ wordpress ]

    - name: Set permissions for files
      shell: "/usr/bin/find /var/www/{{ http_host }}/wordpress/ -type f -exec chmod 660 {} \\;"
      tags: [ wordpress ]

    - name: Download WP CLI
      get_url: 
        url: https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
        dest: /usr/local/bin/wp
        owner: ubuntu
        group: ubuntu
        mode: 0775

    - name: Test WP CLI
      shell: wp --info
      register: wpinfo

    # - debug:
    #     var: wpinfo

    - name: Create logs dir for user ubuntu
      file:
        path: /home/ubuntu/logs
        owner: ubuntu
        group: ubuntu
        mode: 0750
        state: directory
    
    - name: Schedule system cron to trigger WP Cron via WP API every minute
      cron: 
        name: Trigger WP Cron
        # job: wp cron event run --due-now --path=/var/www/{{ http_host }}/wordpress > /dev/null 2>&1
        job: /usr/local/bin/wp cron event run --due-now --path=/var/www/{{ http_host }}/wordpress >> /home/ubuntu/logs/wpcron.log 2>&1
        user: ubuntu
    
    - name: Logrotate for wpcron.log
      template:
        src: "files/wpcron-logrotate.j2"
        dest: "/etc/logrotate.d/wpcron"

    - name: Check if Site24x7 agent is running
      command: systemctl status site24x7monagent.service
      ignore_errors: true
      register: site24x7_check

    # - debug:
    #     var: site24x7_check

    - name: Download Site24x7 installer
      get_url: 
        url: https://staticdownloads.site24x7.eu/server/Site24x7InstallScript.sh
        dest: /tmp/Site24x7InstallScript.sh
        mode: '0660'
      when: site24x7_check.stderr is search("could not be found") and enable_site24x7

    - name: Install Site24x7 agent
      shell: bash /tmp/Site24x7InstallScript.sh -i -key={{ site24x7_key }}
      when: site24x7_check.stderr is search("could not be found") and enable_site24x7

    # Unattended upgrades
    - name: Unattended upgrades
      include_role:
        name: jnv.unattended-upgrades
      vars:
        unattended_origins_patterns:
        - 'origin=Ubuntu,archive=${distro_codename}-security'
        - 'o=Ubuntu,a=${distro_codename}'
        - 'o=Ubuntu,a=${distro_codename}-updates'
        unattended_automatic_reboot: true
        unattended_automatic_reboot_time: "15:30"
        unattended_mail: false
      when: unattended_upgrades

  handlers:
    - name: Reload Nginx
      service:
        name: nginx
        state: reloaded

    - name: Restart Nginx
      service:
        name: nginx
        state: restarted
